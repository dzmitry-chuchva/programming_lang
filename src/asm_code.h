/*! \file          asm_code.h
 *  \author        Чучва Дмитрий
 *  \date          08.12.2006
 *  \brief         заголовочный файл с объявлениями для генерации целевого кода
 *
 * Файл содержит объявления функций, переменных, типов, используемых в процессе генерации целевого
 * кода, в данном случае ассемблерного.
 */

#ifndef __ASM_CODE_H
#define __ASM_CODE_H

#include "symbol.h"
#include "codetable.h"
#include "stdio.h"

//@{
//! импортируемые функции из библиотек поддержки
#define MY_PRINT	"_my_print__000"
#define MY_READ		"_my_read__001"
#define MY_PRINT_STR	"_my_print_str__002"
#define MY_PRINTLN_STR "_my_println__003"
#define MY_FADD "__f__add"
#define MY_FSUB "__f__sub"
#define MY_FMUL "__f__mul"
#define MY_FDIV "__f__div"
#define MY_FPOW "__f__pow"
#define MY_INT2FLOAT "__f__int2float"
#define MY_FLOAT2INT "__f__float2int"
#define MY_FGT "__f__gt"
#define MY_FLW "__f__lw"
#define MY_FGE "__f__ge"
#define MY_FLE "__f__le"
#define MY_FEQ "__f__eq"
#define MY_FNEQ "__f__neq"
//@}

//! определяет, сколько байт будет выделено для ассемблерного кода одной функции
#define BIGSTR_LENGTH	100000

//! генерирует ассемблерный файл, соответствующий заданной таблице кода и таблице символов
/*!
 *  Функция производит обработку таблицы кода и таблицы символов, полученных в результате процесса
 *  синтаксически управляемой трансляции, и генерирует по ним целевой код ассемблер.
 *  \param where файл, куда генерировать
 *  \param data  таблица символов
 *  \param cod   таблица кода
 *  \return -1 - неудача, иначе - функция закончила свою работу без ошибок
 */
int generate_asm_code(FILE *where,symbol *data,ctable_entry *cod);
//! производит преобразование трехадресного кода функции в ассемблер
/*!
 *  Функция производит перевод списка операторов трехадресного кода функции в код ассемблер,
 *  используя информацию в глобальной и локальной таблицах символов.
 *  \param global_table глобальная таблица символов
 *  \param cod          список операторов трехадресного кода функции
 *  \param str          строка, куда производить запись
 *  \return указатель на сформированную строку
 */
char *code2asm(symbol *global_table,ctable_entry *cod,char *str);
//! производит преобразование отдельного трехадресного оператора в код ассемблер
/*!
 *  Функция получает элемент таблицы кода функции и переводит его в код ассемблер.
 *  \param global_table глобальная таблица символов
 *  \param c            трехадресная инструкция
 *  \param table        локальная таблица символов
 *  \param str          строка, куда производить запись
 *  \return указатель на сформированную строку
 */
char *op2asm(symbol *global_table,code *c,symbol *table,char *str);
//! получить случайно сгенерированную строку
/*!
 *  Функция генерирует случайный набор символов, состоящий из заданного числа элементов. 
 *  Используется для генерации имен меток в операторах цикла, ветвления.
 *  \param s   строка, куда генерировать
 *  \param len количество символов, которое необходимо сгенерировать
 *  \return указатель на сгенерированную строку
 */
char *randomstr(char *s,int len);
//! возвращает строку, представляюшую значение символа в коде ассемблер
/*!
 *  Функция формирует строку в зависимости от того, в какой таблице (глобальной или локальной)
 *  находится символ. Код ассемблер будет представлять получение значения этого символа в виде
 *  [метка] (для глобальных) либо [ebp + число] (для локальных).
 *  \param global_table глобальная таблица символовы
 *  \param t            локальная таблица символов
 *  \param s            символ
 *  \return указатель на сформированную строку в статическом буфере (необходимо сразу использовать, так как следующий вызов функции запишет в него другое значение)
 */
char *local_var(symbol *global_table,symbol *t, symbol *s);
//! возвращает строку, представляюшую адрес символа в коде ассемблер
/*!
 *  Функция формирует строку, которая вычисляет адрес символа для передачи параметров функции по
 *  адресу и кладет его в физический стек программы.
 *  \param global_table глобальная таблица символов
 *  \param t            локальная таблица символов
 *  \param s            символ
 *  \return указатель на сформированную строку в статическом буфере (необходимо сразу использовать, так как следующий вызов функции запишет в него другое значение)
 */
char *local_addr(symbol *global_table,symbol *t, symbol *s);						
//! производит необходимые приготовления для выполнения операции с вещественными числами
/*!
 *  Функция формирует ассемблерный код, который производит необходимые преобразования физического стека
 *  программы для последующего вызова операции-функции над вещественными аргументами из библиотеки работы
 *  с вещественными числами.
 *  \param str          строка, куда формировать
 *  \param c            трехадресная инструкция вещественного типа
 *  \param global_table глобальная таблица символов
 *  \param table        локальная таблица символов
 *  \param ret_type     тип трехадресной инструкции
 *  \return указатель на сформированную строку
 */
char *floatop_prepare(char *str,code *c,symbol *global_table,symbol *table,int ret_type);

#endif