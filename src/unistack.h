/*! \file          unistack.h
 *  \author        Чучва Дмитрий
 *  \date          08.12.2006
 *  \brief         описывает абстрактный стек
 *
 * Файл содержит объявления функций, переменных, типов, реализующих абстрактный стек,
 * который может содержать элементы любого типа.
 */

#ifndef __UNISTACK_H
#define __UNISTACK_H

//! структура данных стека
typedef struct tag_stack_t {
	void *data;							   //!< указатель на информацию
	int size;							   //!< размер информации в байтах
	struct tag_stack_t *lower;			   //!< элемент под данным элементом в стеке
} stack_t;

//! создает стек
/*!
 *  Функция выделяет память на первый элемент стека, заполняет его переданными значениями,
 *  устанавливает размер элемента стека.
 *  \param data    информация нового элемента стека
 *  \param el_size размер данных нового и последующих элементов стека
 *  \return указатель на созданный стек из одного элемента
 */
stack_t *create_stack(void *data, int el_size);
//! уничтожает стек
/*!
 *  Функция освобождает память, выделенную под стек.
 *  \param st указатель на вершину стека
 *  \return возвращает NULL
 */
stack_t *destroy_stack(stack_t *st);
//! кладет новый элемент на вершину стека
/*!
 *  Функция создает новый элемент стека по переданными параметрам и кладет его на вершину стека.
 *  \param st      указатель на вершину стека
 *  \param data    данные нового элемента
 *  \param el_size размер данных нового элемента
 *  \return возвращает новый указатель на вершину стека
 */
stack_t *push(stack_t *st,void *data,int el_size);
//! возвращает данные вершины стека
/*!
 *  Функция возвращает указатель на данные, записанные в текщей вершине стека.
 *  \param st вершина стека
 *  \return указатель на данные
 */
void *top(stack_t *st);
//! выталкивает данные из стека
/*!
 *  Функция производит выталкивание текущего элемента на вершине стека и его уничтожение.
 *  \param st вершина стека
 *  \return новая вершина стека
 */
stack_t *pop(stack_t *st);

#endif